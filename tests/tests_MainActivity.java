<METHOD_START> @ java.lang.Override protected void void ( Bundle com.afjk01.tool.btnfctagwriter.Bundle ) { super. onCreate ( com.afjk01.tool.btnfctagwriter.Bundle ) ; com.afjk01.tool.btnfctagwriter.NfcAdapter = NfcAdapter . getDefaultAdapter ( this ) ; if( com.afjk01.tool.btnfctagwriter.NfcAdapter == null ) { Toast . makeText ( this , STRING , Toast . LENGTH_LONG ) . show ( ) ; this . finish ( ) ; } else if( ! com.afjk01.tool.btnfctagwriter.NfcAdapter . isEnabled ( ) ) { Toast . makeText ( this , STRING , Toast . LENGTH_LONG ) . show ( ) ; this . finish ( ) ; } com.afjk01.tool.btnfctagwriter.PendingIntent = PendingIntent . getActivity ( this , NUMBER , new Intent ( this , java.lang.Class<? extends com.afjk01.tool.btnfctagwriter.MainActivity> ( ) ) . addFlags ( Intent . FLAG_ACTIVITY_SINGLE_TOP ) , NUMBER ) ; IntentFilter com.afjk01.tool.btnfctagwriter.IntentFilter = new IntentFilter ( NfcAdapter . ACTION_NDEF_DISCOVERED ) ; try { com.afjk01.tool.btnfctagwriter.IntentFilter . addDataType ( STRING ) ; } catch ( MalformedMimeTypeException com.afjk01.tool.btnfctagwriter.MalformedMimeTypeException ) { } com.afjk01.tool.btnfctagwriter.IntentFilter[] = new IntentFilter [] { com.afjk01.tool.btnfctagwriter.IntentFilter } ; IntentFilter com.afjk01.tool.btnfctagwriter.IntentFilter = new IntentFilter ( NfcAdapter . ACTION_TAG_DISCOVERED ) ; com.afjk01.tool.btnfctagwriter.IntentFilter[] = new IntentFilter [] { com.afjk01.tool.btnfctagwriter.IntentFilter } ; requestWindowFeature ( Window . FEATURE_INDETERMINATE_PROGRESS ) ; setContentView ( R . layout . device_list ) ; setResult ( Activity . RESULT_CANCELED ) ; com.afjk01.tool.btnfctagwriter.ArrayAdapter<java.lang.String> = new ArrayAdapter < java.lang.String > ( this , R . layout . device_name ) ; com.afjk01.tool.btnfctagwriter.ArrayAdapter<java.lang.String> = new ArrayAdapter < java.lang.String > ( this , R . layout . device_name ) ; ListView com.afjk01.tool.btnfctagwriter.ListView = ( ListView ) findViewById ( R . id . paired_devices ) ; com.afjk01.tool.btnfctagwriter.ListView . setAdapter ( com.afjk01.tool.btnfctagwriter.ArrayAdapter<java.lang.String> ) ; com.afjk01.tool.btnfctagwriter.ListView . setOnItemClickListener ( com.afjk01.tool.btnfctagwriter.OnItemClickListener ) ; IntentFilter com.afjk01.tool.btnfctagwriter.IntentFilter = new IntentFilter ( BluetoothDevice . ACTION_FOUND ) ; this . registerReceiver ( com.afjk01.tool.btnfctagwriter.BroadcastReceiver , com.afjk01.tool.btnfctagwriter.IntentFilter ) ; com.afjk01.tool.btnfctagwriter.IntentFilter = new IntentFilter ( BluetoothAdapter . ACTION_DISCOVERY_FINISHED ) ; this . registerReceiver ( com.afjk01.tool.btnfctagwriter.BroadcastReceiver , com.afjk01.tool.btnfctagwriter.IntentFilter ) ; com.afjk01.tool.btnfctagwriter.BluetoothAdapter = BluetoothAdapter . getDefaultAdapter ( ) ; if( ! com.afjk01.tool.btnfctagwriter.BluetoothAdapter . isEnabled ( ) ) { Toast . makeText ( this , STRING , Toast . LENGTH_LONG ) . show ( ) ; this . finish ( ) ; } java.util.Set<com.afjk01.tool.btnfctagwriter.BluetoothDevice> < BluetoothDevice > java.util.Set<com.afjk01.tool.btnfctagwriter.BluetoothDevice> = com.afjk01.tool.btnfctagwriter.BluetoothAdapter . getBondedDevices ( ) ; if ( java.util.Set<com.afjk01.tool.btnfctagwriter.BluetoothDevice> . size ( ) > NUMBER ) { findViewById ( R . id . title_paired_devices ) . setVisibility ( View . VISIBLE ) ; for ( BluetoothDevice com.afjk01.tool.btnfctagwriter.BluetoothDevice : java.util.Set<com.afjk01.tool.btnfctagwriter.BluetoothDevice> ) { com.afjk01.tool.btnfctagwriter.ArrayAdapter<java.lang.String> . add ( com.afjk01.tool.btnfctagwriter.BluetoothDevice . getName ( ) + STRING + com.afjk01.tool.btnfctagwriter.BluetoothDevice . getAddress ( ) ) ; } } else { java.lang.String java.lang.String = getResources ( ) . getText ( R . string . none_paired ) . toString ( ) ; com.afjk01.tool.btnfctagwriter.ArrayAdapter<java.lang.String> . add ( java.lang.String ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public boolean boolean ( Menu com.afjk01.tool.btnfctagwriter.Menu ) { return true ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { super. onDestroy ( ) ; if ( com.afjk01.tool.btnfctagwriter.BluetoothAdapter != null ) { com.afjk01.tool.btnfctagwriter.BluetoothAdapter . cancelDiscovery ( ) ; } this . unregisterReceiver ( com.afjk01.tool.btnfctagwriter.BroadcastReceiver ) ; }  <METHOD_END>
<METHOD_START> public void void ( AdapterView < ? > com.afjk01.tool.btnfctagwriter.AdapterView<?> , View com.afjk01.tool.btnfctagwriter.View , int int , long long ) { com.afjk01.tool.btnfctagwriter.BluetoothAdapter . cancelDiscovery ( ) ; java.lang.String java.lang.String = ( ( TextView ) com.afjk01.tool.btnfctagwriter.View ) . getText ( ) . toString ( ) ; java.lang.String java.lang.String = java.lang.String . java.lang.String ( java.lang.String . int ( ) - NUMBER ) ; void ( java.lang.String ) ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { java.util.Set<com.afjk01.tool.btnfctagwriter.BluetoothDevice> < BluetoothDevice > java.util.Set<com.afjk01.tool.btnfctagwriter.BluetoothDevice> = com.afjk01.tool.btnfctagwriter.BluetoothAdapter . getBondedDevices ( ) ; if ( java.util.Set<com.afjk01.tool.btnfctagwriter.BluetoothDevice> . size ( ) > NUMBER ) { findViewById ( R . id . title_paired_devices ) . setVisibility ( View . VISIBLE ) ; com.afjk01.tool.btnfctagwriter.BluetoothDevice = com.afjk01.tool.btnfctagwriter.BluetoothAdapter . getRemoteDevice ( java.lang.String ) ; void ( ) ; void ( ) ; java.lang.String java.lang.String = STRING ; java.lang.String += STRING + com.afjk01.tool.btnfctagwriter.BluetoothDevice . getName ( ) ; java.lang.String += STRING + com.afjk01.tool.btnfctagwriter.BluetoothDevice . getAddress ( ) ; java.lang.String += STRING + java.lang.Integer . java.lang.String ( com.afjk01.tool.btnfctagwriter.BluetoothDevice . getBluetoothClass ( ) . getDeviceClass ( ) ) ; java.lang.String += STRING + java.lang.Integer . java.lang.String ( com.afjk01.tool.btnfctagwriter.BluetoothDevice . getBluetoothClass ( ) . getMajorDeviceClass ( ) ) ; ParcelUuid [] com.afjk01.tool.btnfctagwriter.ParcelUuid[] = com.afjk01.tool.btnfctagwriter.BluetoothDevice . getUuids ( ) ; java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( uuids . length * NUMBER ) ; for( int int = NUMBER ; int < uuids . length ; int ++ ) { java.util.UUID java.util.UUID = com.afjk01.tool.btnfctagwriter.ParcelUuid[] [ int ] . getUuid ( ) ; java.lang.String += STRING + int + STRING + java.util.UUID . java.lang.String ( ) ; } com.afjk01.tool.btnfctagwriter.AlertDialog = new AlertDialog . AlertDialog ( com.afjk01.tool.btnfctagwriter.MainActivity .this ) . setTitle ( getResources ( ) . getText ( R . string . write_to_tag ) . toString ( ) ) . setMessage ( java.lang.String + java.lang.String ( ) ) . setOnCancelListener ( new DialogInterface . DialogInterface ( ) { @ java.lang.Override public void void ( DialogInterface com.afjk01.tool.btnfctagwriter.DialogInterface ) { void ( ) ; void ( ) ; } } ) . create ( ) ; com.afjk01.tool.btnfctagwriter.AlertDialog . show ( ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( DialogInterface com.afjk01.tool.btnfctagwriter.DialogInterface ) { void ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( Context com.afjk01.tool.btnfctagwriter.Context , Intent com.afjk01.tool.btnfctagwriter.Intent ) { java.lang.String java.lang.String = com.afjk01.tool.btnfctagwriter.Intent . getAction ( ) ; if ( BluetoothDevice . ACTION_FOUND . equals ( java.lang.String ) ) { BluetoothDevice com.afjk01.tool.btnfctagwriter.BluetoothDevice = com.afjk01.tool.btnfctagwriter.Intent . getParcelableExtra ( BluetoothDevice . EXTRA_DEVICE ) ; if ( com.afjk01.tool.btnfctagwriter.BluetoothDevice . getBondState ( ) != BluetoothDevice . BOND_BONDED ) { com.afjk01.tool.btnfctagwriter.ArrayAdapter<java.lang.String> . add ( com.afjk01.tool.btnfctagwriter.BluetoothDevice . getName ( ) + STRING + com.afjk01.tool.btnfctagwriter.BluetoothDevice . getAddress ( ) ) ; } } else if ( BluetoothAdapter . ACTION_DISCOVERY_FINISHED . equals ( java.lang.String ) ) { setProgressBarIndeterminateVisibility ( false ) ; setTitle ( R . string . select_device ) ; if ( com.afjk01.tool.btnfctagwriter.ArrayAdapter<java.lang.String> . getCount ( ) == NUMBER ) { java.lang.String java.lang.String = getResources ( ) . getText ( R . string . none_found ) . toString ( ) ; com.afjk01.tool.btnfctagwriter.ArrayAdapter<java.lang.String> . add ( java.lang.String ) ; } } }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { super. onResume ( ) ; if ( NfcAdapter . ACTION_NDEF_DISCOVERED . equals ( getIntent ( ) . getAction ( ) ) ) { setIntent ( new Intent ( ) ) ; } void ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( ) { super. onPause ( ) ; com.afjk01.tool.btnfctagwriter.NfcAdapter . disableForegroundNdefPush ( this ) ; }  <METHOD_END>
<METHOD_START> byte [] byte[] ( int int ) { byte [] byte[] = new byte [ NUMBER ] ; byte[] [ NUMBER ] = ( byte ) ( NUMBER & ( int ) ) ; byte[] [ NUMBER ] = ( byte ) ( NUMBER & ( int >>> NUMBER ) ) ; byte[] [ NUMBER ] = ( byte ) ( NUMBER & ( int >>> NUMBER ) ) ; byte[] [ NUMBER ] = ( byte ) ( NUMBER & ( int >>> NUMBER ) ) ; return byte[] ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override protected void void ( Intent com.afjk01.tool.btnfctagwriter.Intent ) { if ( ! boolean && NfcAdapter . ACTION_NDEF_DISCOVERED . equals ( com.afjk01.tool.btnfctagwriter.Intent . getAction ( ) ) ) { NdefMessage [] com.afjk01.tool.btnfctagwriter.NdefMessage[] = com.afjk01.tool.btnfctagwriter.NdefMessage[] ( com.afjk01.tool.btnfctagwriter.Intent ) ; } if ( boolean && NfcAdapter . ACTION_TAG_DISCOVERED . equals ( com.afjk01.tool.btnfctagwriter.Intent . getAction ( ) ) ) { Tag com.afjk01.tool.btnfctagwriter.Tag = com.afjk01.tool.btnfctagwriter.Intent . getParcelableExtra ( NfcAdapter . EXTRA_TAG ) ; byte [] byte[] = { ( byte ) NUMBER , ( byte ) NUMBER } ; java.lang.String java.lang.String = com.afjk01.tool.btnfctagwriter.BluetoothDevice . getAddress ( ) ; java.lang.String [] java.lang.String[] = java.lang.String . java.lang.String[] ( STRING ) ; java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( NUMBER ) ; for( int int = NUMBER ; int >= NUMBER ; int -- ) { java.nio.ByteBuffer . java.nio.ByteBuffer ( ( byte ) java.lang.Integer . int ( java.lang.String[] [ int ] , NUMBER ) ) ; } byte [] byte[] = java.nio.ByteBuffer . byte[] ( ) ; byte [] byte[] = { ( byte ) NUMBER } ; byte [] byte[] = com.afjk01.tool.btnfctagwriter.BluetoothDevice . getName ( ) . getBytes ( ) ; byte [] byte[] = { ( byte ) ( byte[] . int + NUMBER ) } ; int int = int ( ) & NUMBER ; int = int >> NUMBER ; int int = com.afjk01.tool.btnfctagwriter.BluetoothDevice . getBluetoothClass ( ) . getMajorDeviceClass ( ) ; int int = com.afjk01.tool.btnfctagwriter.BluetoothDevice . getBluetoothClass ( ) . getDeviceClass ( ) & NUMBER ; int = int >> NUMBER ; byte [] byte[] = { ( byte ) NUMBER } ; byte [] byte[] = { ( byte ) NUMBER } ; byte [] byte[] = { ( byte ) int , ( byte ) int , ( byte ) int } ; byte [] byte[] = { ( byte ) NUMBER } ; ParcelUuid [] com.afjk01.tool.btnfctagwriter.ParcelUuid[] = com.afjk01.tool.btnfctagwriter.BluetoothDevice . getUuids ( ) ; java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( uuids . length * NUMBER ) ; for( int int = NUMBER ; int < uuids . length ; int ++ ) { java.util.UUID java.util.UUID = com.afjk01.tool.btnfctagwriter.ParcelUuid[] [ int ] . getUuid ( ) ; java.lang.String java.lang.String = java.util.UUID . java.lang.String ( ) . java.lang.String ( NUMBER , NUMBER ) ; java.nio.ByteBuffer . java.nio.ByteBuffer ( ( byte ) java.lang.Integer . int ( java.lang.String , NUMBER ) ) ; java.lang.String = java.util.UUID . java.lang.String ( ) . java.lang.String ( NUMBER , NUMBER ) ; java.nio.ByteBuffer . java.nio.ByteBuffer ( ( byte ) java.lang.Integer . int ( java.lang.String , NUMBER ) ) ; } byte [] byte[] = java.nio.ByteBuffer . byte[] ( ) ; byte [] byte[] = { ( byte ) ( byte[] . int + NUMBER ) } ; int int = byte[] . int + byte[] . int + byte[] . int + byte[] . int + byte[] . int + byte[] . int + byte[] . int + byte[] . int + byte[] . int + byte[] . int + byte[] . int ; java.nio.ByteBuffer java.nio.ByteBuffer = java.nio.ByteBuffer . java.nio.ByteBuffer ( int ) ; byte [] byte[] = byte[] ( int ) ; byte[] [ NUMBER ] = byte[] [ NUMBER ] ; byte[] [ NUMBER ] = byte[] [ NUMBER ] ; java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ; java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ; java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ; java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ; java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ; java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ; java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ; java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ; java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ; java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ; java.nio.ByteBuffer . java.nio.ByteBuffer ( byte[] ) ; NdefRecord com.afjk01.tool.btnfctagwriter.NdefRecord = new NdefRecord ( NdefRecord . TNF_MIME_MEDIA , STRING . byte[] ( ) , new byte [] {} , java.nio.ByteBuffer . byte[] ( ) ) ; NdefMessage com.afjk01.tool.btnfctagwriter.NdefMessage = new NdefMessage ( new NdefRecord [] { com.afjk01.tool.btnfctagwriter.NdefRecord } ) ; boolean ( com.afjk01.tool.btnfctagwriter.NdefMessage , com.afjk01.tool.btnfctagwriter.Tag ) ; } }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( View com.afjk01.tool.btnfctagwriter.View ) { void ( ) ; void ( ) ; new AlertDialog . AlertDialog ( com.afjk01.tool.btnfctagwriter.MainActivity .this ) . setTitle ( STRING ) . setOnCancelListener ( new DialogInterface . DialogInterface ( ) { @ java.lang.Override public void void ( DialogInterface com.afjk01.tool.btnfctagwriter.DialogInterface ) { void ( ) ; void ( ) ; } } ) . create ( ) . show ( ) ; }  <METHOD_END>
<METHOD_START> @ java.lang.Override public void void ( DialogInterface com.afjk01.tool.btnfctagwriter.DialogInterface ) { void ( ) ; void ( ) ; }  <METHOD_END>
<METHOD_START> com.afjk01.tool.btnfctagwriter.NdefMessage [] com.afjk01.tool.btnfctagwriter.NdefMessage[] ( Intent com.afjk01.tool.btnfctagwriter.Intent ) { NdefMessage [] com.afjk01.tool.btnfctagwriter.NdefMessage[] = null ; java.lang.String java.lang.String = com.afjk01.tool.btnfctagwriter.Intent . getAction ( ) ; if ( NfcAdapter . ACTION_TAG_DISCOVERED . equals ( java.lang.String ) || NfcAdapter . ACTION_NDEF_DISCOVERED . equals ( java.lang.String ) ) { Parcelable [] com.afjk01.tool.btnfctagwriter.Parcelable[] = com.afjk01.tool.btnfctagwriter.Intent . getParcelableArrayExtra ( NfcAdapter . EXTRA_NDEF_MESSAGES ) ; if ( com.afjk01.tool.btnfctagwriter.Parcelable[] != null ) { com.afjk01.tool.btnfctagwriter.NdefMessage[] = new NdefMessage [ rawMsgs . length ] ; for ( int int = NUMBER ; int < rawMsgs . length ; int ++ ) { com.afjk01.tool.btnfctagwriter.NdefMessage[] [ int ] = ( NdefMessage ) com.afjk01.tool.btnfctagwriter.Parcelable[] [ int ] ; } } else { byte [] byte[] = new byte [] {} ; NdefRecord com.afjk01.tool.btnfctagwriter.NdefRecord = new NdefRecord ( NdefRecord . TNF_UNKNOWN , byte[] , byte[] , byte[] ) ; NdefMessage com.afjk01.tool.btnfctagwriter.NdefMessage = new NdefMessage ( new NdefRecord [] { com.afjk01.tool.btnfctagwriter.NdefRecord } ) ; com.afjk01.tool.btnfctagwriter.NdefMessage[] = new NdefMessage [] { com.afjk01.tool.btnfctagwriter.NdefMessage } ; } } else { Log . d ( java.lang.String , STRING ) ; finish ( ) ; } return com.afjk01.tool.btnfctagwriter.NdefMessage[] ; }  <METHOD_END>
<METHOD_START> private void void ( ) { com.afjk01.tool.btnfctagwriter.NfcAdapter . enableForegroundDispatch ( this , com.afjk01.tool.btnfctagwriter.PendingIntent , com.afjk01.tool.btnfctagwriter.IntentFilter[] , null ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { com.afjk01.tool.btnfctagwriter.NfcAdapter . disableForegroundNdefPush ( this ) ; com.afjk01.tool.btnfctagwriter.NfcAdapter . disableForegroundDispatch ( this ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { boolean = true ; IntentFilter com.afjk01.tool.btnfctagwriter.IntentFilter = new IntentFilter ( NfcAdapter . ACTION_TAG_DISCOVERED ) ; com.afjk01.tool.btnfctagwriter.IntentFilter[] = new IntentFilter [] { com.afjk01.tool.btnfctagwriter.IntentFilter } ; com.afjk01.tool.btnfctagwriter.NfcAdapter . enableForegroundDispatch ( this , com.afjk01.tool.btnfctagwriter.PendingIntent , com.afjk01.tool.btnfctagwriter.IntentFilter[] , null ) ; }  <METHOD_END>
<METHOD_START> private void void ( ) { boolean = false ; com.afjk01.tool.btnfctagwriter.NfcAdapter . disableForegroundDispatch ( this ) ; }  <METHOD_END>
<METHOD_START> boolean boolean ( NdefMessage com.afjk01.tool.btnfctagwriter.NdefMessage , Tag com.afjk01.tool.btnfctagwriter.Tag ) { byte [] byte[] = com.afjk01.tool.btnfctagwriter.NdefMessage . toByteArray ( ) ; int int = com.afjk01.tool.btnfctagwriter.NdefMessage . toByteArray ( ) . length ; com.afjk01.tool.btnfctagwriter.AlertDialog . dismiss ( ) ; try { Ndef com.afjk01.tool.btnfctagwriter.Ndef = Ndef . get ( com.afjk01.tool.btnfctagwriter.Tag ) ; if ( com.afjk01.tool.btnfctagwriter.Ndef != null ) { com.afjk01.tool.btnfctagwriter.Ndef . connect ( ) ; if ( ! com.afjk01.tool.btnfctagwriter.Ndef . isWritable ( ) ) { void ( STRING ) ; return false ; } if ( com.afjk01.tool.btnfctagwriter.Ndef . getMaxSize ( ) < int ) { void ( STRING + com.afjk01.tool.btnfctagwriter.Ndef . getMaxSize ( ) + STRING + int + STRING ) ; return false ; } com.afjk01.tool.btnfctagwriter.Ndef . writeNdefMessage ( com.afjk01.tool.btnfctagwriter.NdefMessage ) ; void ( STRING ) ; return true ; } else { NdefFormatable com.afjk01.tool.btnfctagwriter.NdefFormatable = NdefFormatable . get ( com.afjk01.tool.btnfctagwriter.Tag ) ; if ( com.afjk01.tool.btnfctagwriter.NdefFormatable != null ) { try { com.afjk01.tool.btnfctagwriter.NdefFormatable . connect ( ) ; com.afjk01.tool.btnfctagwriter.NdefFormatable . format ( com.afjk01.tool.btnfctagwriter.NdefMessage ) ; void ( STRING ) ; return true ; } catch ( java.io.IOException java.io.IOException ) { void ( STRING ) ; return false ; } } else { void ( STRING ) ; return false ; } } } catch ( java.lang.Exception java.lang.Exception ) { void ( STRING ) ; } return false ; }  <METHOD_END>
<METHOD_START> private void void ( java.lang.String java.lang.String ) { Toast . makeText ( this , java.lang.String , Toast . LENGTH_SHORT ) . show ( ) ; }  <METHOD_END>
<METHOD_START> private int int ( ) { int int = NUMBER ; java.lang.String java.lang.String = STRING ; if( com.afjk01.tool.btnfctagwriter.BluetoothDevice . getBluetoothClass ( ) . hasService ( android . bluetooth . BluetoothClass . Service . AUDIO ) ) { java.lang.String += STRING ; int += android . bluetooth . BluetoothClass . Service . AUDIO ; } if( com.afjk01.tool.btnfctagwriter.BluetoothDevice . getBluetoothClass ( ) . hasService ( android . bluetooth . BluetoothClass . Service . CAPTURE ) ) { java.lang.String += STRING ; int += android . bluetooth . BluetoothClass . Service . CAPTURE ; } if( com.afjk01.tool.btnfctagwriter.BluetoothDevice . getBluetoothClass ( ) . hasService ( android . bluetooth . BluetoothClass . Service . INFORMATION ) ) { java.lang.String += STRING ; int += android . bluetooth . BluetoothClass . Service . INFORMATION ; } if( com.afjk01.tool.btnfctagwriter.BluetoothDevice . getBluetoothClass ( ) . hasService ( android . bluetooth . BluetoothClass . Service . LIMITED_DISCOVERABILITY ) ) { java.lang.String += STRING ; int += android . bluetooth . BluetoothClass . Service . LIMITED_DISCOVERABILITY ; } if( com.afjk01.tool.btnfctagwriter.BluetoothDevice . getBluetoothClass ( ) . hasService ( android . bluetooth . BluetoothClass . Service . NETWORKING ) ) { java.lang.String += STRING ; int += android . bluetooth . BluetoothClass . Service . NETWORKING ; } if( com.afjk01.tool.btnfctagwriter.BluetoothDevice . getBluetoothClass ( ) . hasService ( android . bluetooth . BluetoothClass . Service . OBJECT_TRANSFER ) ) { java.lang.String += STRING ; int += android . bluetooth . BluetoothClass . Service . OBJECT_TRANSFER ; } if( com.afjk01.tool.btnfctagwriter.BluetoothDevice . getBluetoothClass ( ) . hasService ( android . bluetooth . BluetoothClass . Service . POSITIONING ) ) { java.lang.String += STRING ; int += android . bluetooth . BluetoothClass . Service . POSITIONING ; } if( com.afjk01.tool.btnfctagwriter.BluetoothDevice . getBluetoothClass ( ) . hasService ( android . bluetooth . BluetoothClass . Service . RENDER ) ) { java.lang.String += STRING ; int += android . bluetooth . BluetoothClass . Service . RENDER ; } if( com.afjk01.tool.btnfctagwriter.BluetoothDevice . getBluetoothClass ( ) . hasService ( android . bluetooth . BluetoothClass . Service . TELEPHONY ) ) { java.lang.String += STRING ; int += android . bluetooth . BluetoothClass . Service . TELEPHONY ; } return int ; }  <METHOD_END>
<METHOD_START> private java.lang.String java.lang.String ( ) { int int = NUMBER ; java.lang.String java.lang.String = STRING ; if( com.afjk01.tool.btnfctagwriter.BluetoothDevice . getBluetoothClass ( ) . hasService ( android . bluetooth . BluetoothClass . Service . AUDIO ) ) { java.lang.String += STRING ; int += android . bluetooth . BluetoothClass . Service . AUDIO ; } if( com.afjk01.tool.btnfctagwriter.BluetoothDevice . getBluetoothClass ( ) . hasService ( android . bluetooth . BluetoothClass . Service . CAPTURE ) ) { java.lang.String += STRING ; int += android . bluetooth . BluetoothClass . Service . CAPTURE ; } if( com.afjk01.tool.btnfctagwriter.BluetoothDevice . getBluetoothClass ( ) . hasService ( android . bluetooth . BluetoothClass . Service . INFORMATION ) ) { java.lang.String += STRING ; int += android . bluetooth . BluetoothClass . Service . INFORMATION ; } if( com.afjk01.tool.btnfctagwriter.BluetoothDevice . getBluetoothClass ( ) . hasService ( android . bluetooth . BluetoothClass . Service . LIMITED_DISCOVERABILITY ) ) { java.lang.String += STRING ; int += android . bluetooth . BluetoothClass . Service . LIMITED_DISCOVERABILITY ; } if( com.afjk01.tool.btnfctagwriter.BluetoothDevice . getBluetoothClass ( ) . hasService ( android . bluetooth . BluetoothClass . Service . NETWORKING ) ) { java.lang.String += STRING ; int += android . bluetooth . BluetoothClass . Service . NETWORKING ; } if( com.afjk01.tool.btnfctagwriter.BluetoothDevice . getBluetoothClass ( ) . hasService ( android . bluetooth . BluetoothClass . Service . OBJECT_TRANSFER ) ) { java.lang.String += STRING ; int += android . bluetooth . BluetoothClass . Service . OBJECT_TRANSFER ; } if( com.afjk01.tool.btnfctagwriter.BluetoothDevice . getBluetoothClass ( ) . hasService ( android . bluetooth . BluetoothClass . Service . POSITIONING ) ) { java.lang.String += STRING ; int += android . bluetooth . BluetoothClass . Service . POSITIONING ; } if( com.afjk01.tool.btnfctagwriter.BluetoothDevice . getBluetoothClass ( ) . hasService ( android . bluetooth . BluetoothClass . Service . RENDER ) ) { java.lang.String += STRING ; int += android . bluetooth . BluetoothClass . Service . RENDER ; } if( com.afjk01.tool.btnfctagwriter.BluetoothDevice . getBluetoothClass ( ) . hasService ( android . bluetooth . BluetoothClass . Service . TELEPHONY ) ) { java.lang.String += STRING ; int += android . bluetooth . BluetoothClass . Service . TELEPHONY ; } return java.lang.String + STRING + java.lang.Integer . java.lang.String ( int ) + STRING + java.lang.Integer . java.lang.String ( int ) ; }  <METHOD_END>
